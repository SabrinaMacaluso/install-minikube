List of kubectl Commands:

1. Retrieve information about running pods:
   kubectl get pods

   This command shows a list of pods running in the Kubernetes cluster.

2. Get detailed information about a specific pod:
   kubectl describe pod <pod_name>

   Use this command to get detailed information about a specific pod, including its status, events, and configuration.

3. Create a new deployment with a specified container image:
   kubectl create deployment <deployment_name> --image=<image_name>

   This command creates a deployment in the cluster using a specified container image.

4. Expose a deployment as a service within the cluster:
   kubectl expose deployment <deployment_name> --port=<port_number> --target-port=<target_port>

   Use this command to make a deployment accessible as a service within the cluster, allowing communication with other pods or external clients.

5. Scale the number of replicas for a deployment:
   kubectl scale deployment <deployment_name> --replicas=<replica_count>

   This command allows you to increase or decrease the number of instances (replicas) running for a specific deployment.

6. Delete a specific pod from the cluster:
   kubectl delete pod <pod_name>

   Use this command to remove a specific pod from the cluster.

7. Apply configuration defined in a YAML file to the cluster:
   kubectl apply -f <yaml_file>

   This command applies the configuration defined in a YAML file to the cluster, creating or updating the specified resources.

8. Retrieve information about services running in the cluster:
   kubectl get services

   This command displays a list of services running in the cluster, including their IP addresses and ports.

9. Display logs generated by a specific pod:
   kubectl logs <pod_name>

   Use this command to view the logs generated by a specific pod, which can help in troubleshooting and understanding pod behavior.

10. Execute a command directly inside a pod:
    kubectl exec -it <pod_name> -- <command>

    This command allows you to execute a command directly inside a pod, providing an interactive shell for debugging or running administrative tasks.

11. Set up port forwarding to access a pod's port locally:
    kubectl port-forward <pod_name> <local_port>:<pod_port>

    Use this command to forward traffic from a specific port on your local machine to a port on a pod within the cluster, facilitating local access to the pod.

12. Check the status of a deployment's rollout:
    kubectl rollout status deployment/<deployment_name>

    This command provides information about the current status of a deployment's rollout, including the replica set and rollout progress.
